"use strict";
// noinspection UnnecessaryLocalVariableJS
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generatePageOptions = exports.readTemplate = exports.renderTemplate = exports.readHtml = exports.generateUrl = void 0;
const types_1 = require("./types");
const path = __importStar(require("path"));
const fs = __importStar(require("fs"));
const fsp = fs.promises;
/**
 * generate URL
 * @param url
 */
function generateUrl(url) {
    if (!url) {
        return '/';
    }
    // url with parameters
    if (url.indexOf('?') > 0) {
        return url.split('?')[0];
    }
    return url;
}
exports.generateUrl = generateUrl;
/**
 * read HTML file from disk and generate code from template system(with render function)
 * @param template
 * @param data
 * @param render
 */
async function readHtml({ template = '', data = {}, render = types_1.defaultRender }) {
    const templatePath = path.resolve(types_1.cwd, `.${template}`);
    if (!fs.existsSync(templatePath)) {
        console.error('template must exist!');
        return '';
    }
    const htmlCode = await renderTemplate(templatePath, render, data);
    return htmlCode;
}
exports.readHtml = readHtml;
/**
 * render template
 * @param templatePath
 * @param render
 * @param data
 */
async function renderTemplate(templatePath, render, data) {
    return await readTemplate(templatePath).then(code => {
        const result = render(code, data);
        return result;
    });
}
exports.renderTemplate = renderTemplate;
/**
 * read html file's content to render with render function
 * @param templatePath
 */
async function readTemplate(templatePath) {
    const result = await fsp.readFile(templatePath);
    return result.toString();
}
exports.readTemplate = readTemplate;
/**
 * generate page option from string/object to object
 * @param page
 * @param globalData
 * @param globalRender
 */
async function generatePageOptions(page, globalData, globalRender) {
    var _a;
    if (typeof page === 'string') {
        return {
            template: page,
            data: {
                ...globalData,
            },
            render: globalRender,
        };
    }
    // todo
    const { data = {}, render, template } = page;
    return {
        template: template,
        data: {
            ...globalData,
            ...data,
        },
        render: (_a = render !== null && render !== void 0 ? render : globalRender) !== null && _a !== void 0 ? _a : types_1.defaultRender,
    };
}
exports.generatePageOptions = generatePageOptions;
//# sourceMappingURL=devUtils.js.map