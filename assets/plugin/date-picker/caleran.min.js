!(function (t, e, a, i) {
  var n = function (e, a) {
    (this.elem = e),
      (this.$elem = t(e)),
      (this.options = a),
      (this.metadata = this.$elem.data("plugin-options"));
  };
  (n.defaults = (n.prototype = {
    pubblico: function () {
      return {
        startDate: moment().startOf("day"),
        endDate: moment().startOf("day"),
        format: "L",
        dateSeparator: " - ",
        calendarCount: 1,
        inline: !1,
        minDate: null,
        maxDate: null,
        showHeader: !0,
        showFooter: !0,
        rangeOrientation: "horizontal",
        verticalRangeWidth: 180,
        showButtons: !1,
        startOnMonday: !1,
        container: "body",
        oneCalendarWidth: 213,
        enableKeyboard: !0,
        showOn: "bottom",
        arrowOn: "left",
        autoAlign: !0,
        locale: moment.locale(),
        singleDate: !1,
        target: null,
        autoCloseOnSelect: !1,
        startEmpty: !1,
        ranges: [
          { title: "Today", startDate: moment(), endDate: moment() },
          {
            title: "3 Days",
            startDate: moment(),
            endDate: moment().add(2, "days"),
          },
          {
            title: "5 Days",
            startDate: moment(),
            endDate: moment().add(4, "days"),
          },
          {
            title: "1 Week",
            startDate: moment(),
            endDate: moment().add(6, "days"),
          },
          {
            title: "Till Next Week",
            startDate: moment(),
            endDate: moment().endOf("week"),
          },
          {
            title: "Till Next Month",
            startDate: moment(),
            endDate: moment().endOf("month"),
          },
        ],
        rangeLabel: "Ranges: ",
        cancelLabel: "Cancel",
        applyLabel: "Apply",
        onbeforeselect: function () {
          return !0;
        },
        onafterselect: function () {},
        onbeforeshow: function () {},
        onbeforehide: function () {},
        onaftershow: function () {},
        onafterhide: function () {},
        onfirstselect: function () {},
        onrangeselect: function () {},
        onbeforemonthchange: function () {
          return !0;
        },
        onaftermonthchange: function () {},
        onafteryearchange: function () {},
        ondraw: function () {},
        oninit: function () {},
        disableDays: function () {
          return !1;
        },
        disabledRanges: [],
        continuous: !1,
        enableMonthSwitcher: !0,
        enableYearSwitcher: !0,
        numericMonthSwitcher: !1,
        monthSwitcherFormat: "MMMM",
        showWeekNumbers: !1,
      };
    },
    privato: function () {
      return {
        startSelected: !1,
        currentDate: moment().startOf("day"),
        endSelected: !0,
        hoverDate: null,
        keyboardHoverDate: null,
        headerStartDay: null,
        headerStartDate: null,
        headerStartWeekday: null,
        headerEndDay: null,
        headerEndDate: null,
        headerEndWeekday: null,
        swipeTimeout: null,
        isMobile: !1,
        valElements: [
          "BUTTON",
          "OPTION",
          "INPUT",
          "LI",
          "METER",
          "PROGRESS",
          "PARAM",
        ],
        dontHideOnce: !1,
        initiator: null,
        initComplete: !1,
        startDateBackup: null,
        startDateInitial: null,
        endDateInitial: null,
        firstValueSelected: !1,
        throttleTimeout: null,
        documentEvent: null,
        delayInputUpdate: !1,
        lastScrollX: 0,
        lastScrollY: 0,
        isTicking: !1,
        parentScrollEventsAttached: !1,
        rafID: 0,
      };
    },
    init: function () {
      return (
        (this.config = t.extend(
          {},
          this.pubblico(),
          this.options,
          this.metadata
        )),
        (this.globals = t.extend({}, this.privato())),
        (this.globals.isMobile = this.checkMobile()),
        this.applyConfig(),
        this.fetchInputs(),
        this.drawUserInterface(),
        this.addInitialEvents(),
        this.addKeyboardEvents(),
        this.$elem.data("caleran", this),
        this.config.oninit(this),
        (this.globals.initComplete = !0),
        (this.globals.lastScrollX =
          e.scrollX || e.pageXOffset || a.documentElement.scrollLeft),
        (this.globals.lastScrollY =
          e.scrollY || e.pageYOffset || a.documentElement.scrollTop),
        t(e).trigger("resize.caleran"),
        this
      );
    },
    validateDates: function () {
      var t;
      moment(this.config.startDate, this.config.format).isValid() &&
      moment(this.config.endDate, this.config.format).isValid()
        ? ((this.config.startDate = moment(
            this.config.startDate,
            this.config.format
          )
            .middleOfDay()
            .locale(this.config.locale)),
          (this.config.endDate = moment(this.config.endDate, this.config.format)
            .middleOfDay()
            .locale(this.config.locale)),
          this.config.startDate.isAfter(this.config.endDate, "day") &&
            ((t = this.config.startDate.clone()),
            (this.config.startDate = this.config.endDate.clone()),
            (this.config.endDate = t.clone()),
            (t = null)))
        : ((this.config.startDate = moment()
            .middleOfDay()
            .locale(this.config.locale)),
          (this.config.endDate = moment()
            .middleOfDay()
            .locale(this.config.locale))),
        (this.globals.currentDate = moment(
          this.config.startDate,
          this.config.format
        )),
        null !== this.config.minDate &&
        moment(this.config.minDate, this.config.format).isValid()
          ? (this.config.minDate = moment(
              this.config.minDate,
              this.config.format
            ).middleOfDay())
          : (this.config.minDate = null),
        null !== this.config.maxDate &&
        moment(this.config.maxDate, this.config.format).isValid()
          ? (this.config.maxDate = moment(
              this.config.maxDate,
              this.config.format
            ).middleOfDay())
          : (this.config.maxDate = null),
        null !== this.config.minDate &&
          null !== this.config.maxDate &&
          this.config.minDate.isAfter(this.config.maxDate, "day") &&
          ((t = this.config.minDate.clone()),
          (this.config.minDate = this.config.maxDate.clone()),
          (this.config.maxDate = t.clone()),
          (t = null)),
        null !== this.config.minDate &&
          null !== this.config.startDate &&
          this.config.minDate.isAfter(this.config.startDate, "day") &&
          (this.config.startDate = this.config.minDate.clone()),
        null !== this.config.minDate &&
          null !== this.config.endDate &&
          this.config.minDate.isAfter(this.config.endDate, "day") &&
          (this.config.endDate = this.config.minDate.clone()),
        null !== this.config.maxDate &&
          null !== this.config.startDate &&
          this.config.maxDate.isBefore(this.config.startDate, "day") &&
          (this.config.startDate = this.config.maxDate.clone()),
        null !== this.config.maxDate &&
          null !== this.config.endDate &&
          this.config.maxDate.isBefore(this.config.endDate, "day") &&
          (this.config.endDate = this.config.maxDate.clone()),
        (!1 === this.checkRangeContinuity() ||
          this.isDisabled(this.config.startDate) ||
          (!1 === this.config.singleDate &&
            this.isDisabled(this.config.endDate))) &&
          this.clearInput();
    },
    applyConfig: function () {
      null === this.config.target && (this.config.target = this.$elem),
        !1 === this.globals.isMobile
          ? (!0 === this.config.inline
              ? ((this.container = this.$elem
                  .wrapAll(
                    "<div class='caleran-container caleran-inline' tabindex='1'></div>"
                  )
                  .parent()),
                (this.input = t("<div class='caleran-input'></div>").appendTo(
                  this.container
                )),
                (this.elem.type = "hidden"),
                (this.config.showButtons = !1),
                this.setViewport())
              : ((this.container = t(
                  "<div class='caleran-container caleran-popup' style='display: none;'><div class='caleran-box-arrow-top'></div></div>"
                ).appendTo(this.config.container)),
                (this.input = t("<div class='caleran-input'></div>").appendTo(
                  this.container
                )),
                this.config.showButtons &&
                  ((this.globals.delayInputUpdate = !0),
                  (this.config.autoCloseOnSelect = !1))),
            "horizontal" === this.config.rangeOrientation
              ? this.input.css(
                  "width",
                  this.config.calendarCount * this.config.oneCalendarWidth +
                    "px"
                )
              : this.input.css(
                  "width",
                  this.config.calendarCount * this.config.oneCalendarWidth +
                    this.config.verticalRangeWidth +
                    "px"
                ))
          : (!0 === this.config.inline
              ? ((this.container = this.$elem
                  .wrapAll(
                    "<div class='caleran-container-mobile caleran-inline' tabindex='1'></div>"
                  )
                  .parent()),
                (this.input = t("<div class='caleran-input'></div>").appendTo(
                  this.container
                )),
                (this.elem.type = "hidden"),
                (this.config.showButtons = !1))
              : ((this.container = t(
                  "<div class='caleran-container-mobile'></div>"
                ).appendTo(this.config.container)),
                (this.input = t(
                  "<div class='caleran-input' style='display: none;'></div>"
                ).appendTo(this.container)),
                (this.globals.delayInputUpdate = !0),
                this.config.showButtons &&
                  (this.config.autoCloseOnSelect = !1)),
            this.$elem.on("focus", function () {
              t(this).blur();
            })),
        this.clearRangeSelection();
    },
    clearRangeSelection: function () {
      for (var e = 0; e < this.config.ranges.length; e++)
        this.config.ranges[e].selected = !1;
      this.container.find(".caleran-range").each(function () {
        t(this).removeClass("caleran-range-selected");
      });
    },
    fetchInputs: function () {
      var e = null;
      if (
        ((e =
          -1 !==
          t.inArray(this.config.target.get(0).tagName, this.globals.valElements)
            ? this.config.target.val()
            : this.config.target.text()),
        !1 === this.config.singleDate &&
          e.indexOf(this.config.dateSeparator) > 0)
      ) {
        var a = e.split(this.config.dateSeparator);
        2 == a.length &&
          moment(a[0], this.config.format, this.config.locale).isValid() &&
          moment(a[1], this.config.format, this.config.locale).isValid() &&
          ((this.config.startDate = moment(
            a[0],
            this.config.format,
            this.config.locale
          ).middleOfDay()),
          (this.config.endDate = moment(
            a[1],
            this.config.format,
            this.config.locale
          ).middleOfDay()),
          (this.globals.firstValueSelected = !0));
      } else if (!0 === this.config.singleDate) {
        var i = e;
        "" != i &&
          moment(i, this.config.format, this.config.locale).isValid() &&
          ((this.config.startDate = moment(
            i,
            this.config.format,
            this.config.locale
          ).middleOfDay()),
          (this.config.endDate = moment(
            i,
            this.config.format,
            this.config.locale
          ).middleOfDay()),
          (this.globals.firstValueSelected = !0));
      }
      this.config.startEmpty &&
        !this.globals.firstValueSelected &&
        this.clearInput(),
        this.validateDates();
    },
    drawUserInterface: function () {
      this.drawHeader(),
        (this.calendars = this.input.find(".caleran-calendars").first());
      for (
        var t = this.globals.currentDate.clone().middleOfDay(), e = 0;
        e < this.config.calendarCount;
        e++
      )
        this.drawCalendarOfMonth(t), (t = t.add(1, "month"));
      if (
        (this.calendars
          .find(".caleran-calendar")
          .last()
          .addClass("no-border-right"),
        this.drawArrows(),
        this.drawFooter(),
        (!0 !== this.globals.isMobile && !1 !== this.config.inline) ||
          !this.globals.initComplete ||
          this.setViewport(),
        !1 === this.globals.startSelected)
      )
        if (this.globals.initComplete) this.updateInput(!1);
        else {
          var a = this.globals.delayInputUpdate;
          (this.globals.delayInputUpdate = !1),
            this.updateInput(!1),
            (this.globals.delayInputUpdate = a);
        }
      this.reDrawCells();
    },
    drawHeader: function () {
      var t =
        "<div class='caleran-header'><div class='caleran-header-start'><div class='caleran-header-start-day'></div><div class='caleran-header-start-date'></div><div class='caleran-header-start-weekday'></div></div>";
      !1 === this.config.singleDate &&
        // (t +=
        //   '<div class="caleran-header-separator"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"x="0px" y="0px" viewBox="0 0 31.49 31.49" xml:space="preserve"><path style="fill:#1E201D;" d="M21.205,5.007c-0.429-0.444-1.143-0.444-1.587,0c-0.429,0.429-0.429,1.143,0,1.571l8.047,8.047H1.111 C0.492,14.626,0,15.118,0,15.737c0,0.619,0.492,1.127,1.111,1.127h26.554l-8.047,8.032c-0.429,0.444-0.429,1.159,0,1.587c0.444,0.444,1.159,0.444,1.587,0l9.952-9.952c0.444-0.429,0.444-1.143,0-1.571L21.205,5.007z"/><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div><div class=\'caleran-header-end\'><div class=\'caleran-header-end-day\'></div><div class=\'caleran-header-end-date\'></div><div class=\'caleran-header-end-weekday\'></div></div>'),
        (t += "</div><div class='caleran-calendars'></div>"),
        this.input.append(t),
        !1 === this.config.showHeader &&
          this.input.find(".caleran-header").hide(),
        (this.globals.headerStartDay = this.input.find(
          ".caleran-header-start-day"
        )),
        (this.globals.headerStartDate = this.input.find(
          ".caleran-header-start-date"
        )),
        (this.globals.headerStartWeekday = this.input.find(
          ".caleran-header-start-weekday"
        )),
        (this.globals.headerEndDay = this.input.find(
          ".caleran-header-end-day"
        )),
        (this.globals.headerEndDate = this.input.find(
          ".caleran-header-end-date"
        )),
        (this.globals.headerEndWeekday = this.input.find(
          ".caleran-header-end-weekday"
        )),
        this.updateHeader();
    },
    updateHeader: function () {
      this.config.startDate && this.config.startDate.locale(this.config.locale),
        this.config.endDate && this.config.endDate.locale(this.config.locale),
        (this.config.startEmpty && !1 === this.globals.firstValueSelected) ||
          (null !== this.config.startDate
            ? (this.globals.headerStartDay.text(this.config.startDate.date()),
              this.globals.isMobile
                ? this.globals.headerStartDate.text(
                    this.config.startDate.format("MMM") +
                      " " +
                      this.config.startDate.year()
                  )
                : this.globals.headerStartDate.text(
                    this.config.startDate.format("MMMM") +
                      " " +
                      this.config.startDate.year()
                  ),
              this.globals.headerStartWeekday.text(
                this.config.startDate.format("dddd")
              ))
            : (this.globals.headerStartDay.text(""),
              this.globals.headerStartDate.text(""),
              this.globals.headerStartWeekday.text("")),
          !1 === this.config.singleDate &&
            (null !== this.config.endDate
              ? (this.globals.headerEndDay.text(this.config.endDate.date()),
                this.globals.isMobile
                  ? this.globals.headerEndDate.text(
                      this.config.endDate.format("MMM") +
                        " " +
                        this.config.endDate.year()
                    )
                  : this.globals.headerEndDate.text(
                      this.config.endDate.format("MMMM") +
                        " " +
                        this.config.endDate.year()
                    ),
                this.globals.headerEndWeekday.text(
                  this.config.endDate.format("dddd")
                ))
              : (this.globals.headerEndDay.text(""),
                this.globals.headerEndDate.text(""),
                this.globals.headerEndWeekday.text(""))));
    },
    isUpdateable: function () {
      var t = this.globals.delayInputUpdate,
        e = this.config.startEmpty && !this.globals.firstValueSelected;
      return (
        (e =
          (e =
            e ||
            (!0 === this.config.singleDate &&
              null === this.config.startDate)) ||
          (!1 === this.config.singleDate &&
            (null === this.config.startDate ||
              null === this.config.endDate))) && this.clearInput(),
        !e && !t
      );
    },
    updateInput: function (e) {
      this.config.startDate && this.config.startDate.locale(this.config.locale),
        this.config.endDate && this.config.endDate.locale(this.config.locale),
        this.isUpdateable() &&
          (-1 !==
          t.inArray(this.config.target.get(0).tagName, this.globals.valElements)
            ? !1 === this.config.singleDate
              ? this.config.target.val(
                  this.config.startDate.format(this.config.format) +
                    this.config.dateSeparator +
                    this.config.endDate.format(this.config.format)
                )
              : this.config.target.val(
                  this.config.startDate.format(this.config.format)
                )
            : !1 === this.config.singleDate
            ? this.config.target.text(
                this.config.startDate.format(this.config.format) +
                  this.config.dateSeparator +
                  this.config.endDate.format(this.config.format)
              )
            : this.config.target.text(
                this.config.startDate.format(this.config.format)
              ),
          !0 === this.globals.initComplete &&
            !0 === e &&
            this.config.onafterselect(
              this,
              this.config.startDate.clone(),
              this.config.endDate.clone()
            ));
    },
    clearInput: function () {
      if (
        (-1 !==
        t.inArray(this.config.target.get(0).tagName, this.globals.valElements)
          ? (this.config.singleDate, this.config.target.val(""))
          : (this.config.singleDate, this.config.target.text("")),
        (this.config.startDate = this.config.endDate = null),
        this.config.startEmpty && (this.globals.firstValueSelected = !1),
        this.globals.initComplete)
      ) {
        this.updateHeader();
        var e =
          void 0 === this.footer ? [] : this.footer.find(".caleran-apply");
        e.length > 0 && e.attr("disabled", "disabled");
      }
    },
    drawArrows: function () {
      this.container.find(".caleran-title").length > 0 &&
        (this.globals.isMobile
          ? (this.container
              .find(".caleran-title")
              .prepend(
                '<div class="caleran-prev"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"/></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
              ),
            this.container
              .find(".caleran-title")
              .append(
                "<div class='caleran-next'><i class='fa fa-arrow-right'></i></div>"
              ))
          : (this.container
              .find(".caleran-title")
              .first()
              .prepend(
                '<div class="caleran-prev"><svg class="caleran-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"/></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
              ),
            this.container
              .find(".caleran-title")
              .last()
              .append(
                '<div class="caleran-next"><svg class="caleran-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M360.731,229.075l-225.1-225.1c-5.3-5.3-13.8-5.3-19.1,0s-5.3,13.8,0,19.1l215.5,215.5l-215.5,215.5c-5.3,5.3-5.3,13.8,0,19.1c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-4l225.1-225.1C365.931,242.875,365.931,234.275,360.731,229.075z"/></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
              )));
    },
    drawCalendarOfMonth: function (t) {
      var e = moment.localeData(this.config.locale).firstDayOfWeek(),
        a = moment(t)
          .locale(this.config.locale)
          .date(1)
          .startOf("week")
          .middleOfDay();
      1 == e && !1 === this.config.startOnMonday
        ? (a.add(-1, "days"), (e = 0))
        : 0 === e &&
          !0 === this.config.startOnMonday &&
          (a.add(1, "days"), (e = 1)),
        a.isAfter(moment(t).date(1)) && a.add(-7, "day");
      var i =
          "<div class='caleran-calendar" +
          (this.config.showWeekNumbers ? " caleran-calendar-weeknumbers" : "") +
          "' data-month='" +
          t.month() +
          "'>",
        n = 0,
        s = "",
        o = "";
      this.config.enableMonthSwitcher && (s = " class='caleran-month-switch'"),
        this.config.enableYearSwitcher && (o = " class='caleran-year-switch'"),
        (i +=
          "<div class='caleran-title'><b" +
          s +
          ">" +
          t.locale(this.config.locale).format("MMMM") +
          "</b>&nbsp;<span" +
          o +
          ">" +
          t.year() +
          "</span></div>"),
        (i += "<div class='caleran-days-container'>");
      var l = moment.localeData(this.config.locale).weekdaysShort();
      this.config.showWeekNumbers &&
        (i += "<div class='caleran-dayofweek'>&nbsp;</div>");
      for (var r = e; r < e + 7; r++)
        i += "<div class='caleran-dayofweek'>" + l[r % 7] + "</div>";
      for (; n < 42; ) {
        var c = a.middleOfDay().unix(),
          h = t.month() == a.month() ? "caleran-day" : "caleran-disabled";
        n % 7 == 0 &&
          this.config.showWeekNumbers &&
          (i +=
            "<div class='caleran-weeknumber'><span>" +
            a.format("ww") +
            "</span></div>"),
          (i +=
            "<div class='" +
            h +
            "' data-value='" +
            c +
            "'><span>" +
            a.date() +
            "</span></div>"),
          a.add(moment.duration({ days: 1 })),
          n++;
      }
      (i += "</div>"), (i += "</div>"), this.calendars.append(i);
    },
    drawFooter: function () {
      //   if (!1 === this.config.singleDate && !0 === this.config.showFooter) {
      //     "horizontal" === this.config.rangeOrientation || this.globals.isMobile
      //       ? this.input.append("<div class='caleran-ranges'></div>")
      //       : (this.input.addClass("caleran-input-vertical-range"),
      //         this.input.wrapInner("<div class='caleran-left'></div>"),
      //         t(
      //           "<div class='caleran-right' style='max-width: " +
      //             this.config.verticalRangeWidth +
      //             "px; min-width: " +
      //             this.config.verticalRangeWidth +
      //             "px'><div class='caleran-ranges'></div></div>"
      //         ).insertAfter(this.input.find(".caleran-left")));
      //     var e = this.input.parent().find(".caleran-ranges");
      //     e.append(
      //       "<span class='caleran-range-header-container'><div class='caleran-range-header'>" +
      //         this.config.rangeLabel +
      //         "</div></span>"
      //     );
      //     for (var a = 0; a < this.config.ranges.length; a++)
      //       e.append(
      //         "<div class='caleran-range" +
      //           (this.config.ranges[a].selected
      //             ? " caleran-range-selected"
      //             : "") +
      //           "' data-id='" +
      //           a +
      //           "'>" +
      //           this.config.ranges[a].title +
      //           "</div>"
      //       );
      //   }
      this.globals.isMobile &&
        !this.config.inline &&
        ((!0 !== this.config.singleDate && !1 !== this.config.showFooter) ||
          this.input.append("<div class='caleran-filler'></div>")),
        ((this.globals.isMobile && !this.config.inline) ||
          (!this.globals.isMobile &&
            !this.config.inline &&
            this.config.showButtons)) &&
          ("horizontal" === this.config.rangeOrientation ||
          this.globals.isMobile
            ? this.input.append("<div class='caleran-footer'></div>")
            : this.input
                .find(".caleran-right")
                .append("<div class='caleran-footer'></div>"),
          (this.footer = this.input.find(".caleran-footer")),
          this.footer.append(
            "<button type='button' class='caleran-cancel'>" +
              this.config.cancelLabel +
              "</button>"
          ),
          this.footer.append(
            "<button type='button' class='caleran-apply'>" +
              this.config.applyLabel +
              "</button>"
          ),
          !1 === this.globals.firstValueSelected &&
            1 == this.config.startEmpty &&
            this.footer.find(".caleran-apply").attr("disabled", "disabled"));
    },
    drawNextMonth: function (t) {
      if (
        (((t = t || e.event).target = t.target || t.srcElement),
        null === this.globals.swipeTimeout)
      ) {
        var a = this;
        this.globals.swipeTimeout = setTimeout(function () {
          if (
            !0 ===
            a.config.onbeforemonthchange(
              a,
              a.globals.currentDate.clone().startOfMonth(),
              "next"
            )
          ) {
            var t = a.calendars.get(0).scrollTop;
            a.globals.currentDate.middleOfDay().add(1, "month"),
              a.reDrawCalendars(),
              (a.calendars.get(0).scrollTop = t),
              a.config.onaftermonthchange(
                a,
                a.globals.currentDate.clone().startOfMonth()
              );
          }
          a.globals.swipeTimeout = null;
        }, 100);
      }
      this.stopBubbling(t);
    },
    drawPrevMonth: function (t) {
      if (
        (((t = t || e.event).target = t.target || t.srcElement),
        null === this.globals.swipeTimeout)
      ) {
        var a = this;
        this.globals.swipeTimeout = setTimeout(function () {
          if (
            !0 ===
            a.config.onbeforemonthchange(
              a,
              a.globals.currentDate.clone().startOfMonth(),
              "prev"
            )
          ) {
            var t = a.calendars.get(0).scrollTop;
            a.globals.currentDate.middleOfDay().subtract(1, "month"),
              a.reDrawCalendars(),
              (a.calendars.get(0).scrollTop = t),
              a.config.onaftermonthchange(
                a,
                a.globals.currentDate.clone().startOfMonth()
              );
          }
          a.globals.swipeTimeout = null;
        }, 100);
      }
      this.stopBubbling(t);
    },
    cellClicked: function (a) {
      ((a = a || e.event).target = a.target || a.srcElement),
        !1 === t(a.target).hasClass("caleran-day") &&
          (a.target = t(a.target).closest(".caleran-day").get(0));
      var i = t(a.target).data("value"),
        n = moment.unix(i).middleOfDay();
      if (!1 === this.config.singleDate)
        if (!1 === this.globals.startSelected) {
          null !== this.config.startDate &&
            (this.globals.startDateBackup = this.config.startDate.clone()),
            (this.config.startDate = n),
            (this.config.endDate = null),
            (this.globals.startSelected = !0),
            (this.globals.endSelected = !1);
          var s =
            void 0 === this.footer ? [] : this.footer.find(".caleran-apply");
          s.length > 0 && s.attr("disabled", "disabled"),
            this.config.onfirstselect(this, this.config.startDate.clone());
        } else {
          if (n.isBefore(this.config.startDate)) {
            var o = this.config.startDate.clone();
            (this.config.startDate = n.clone()), (n = o);
          }
          (this.globals.startDateBackup = null),
            (this.config.endDate = n),
            (this.globals.endSelected = !0),
            (this.globals.startSelected = !1),
            (this.globals.hoverDate = null),
            !0 ===
              this.config.onbeforeselect(
                this,
                this.config.startDate.clone(),
                this.config.endDate.clone()
              ) && !0 === this.checkRangeContinuity()
              ? ((this.globals.firstValueSelected = !0),
                this.clearRangeSelection(),
                this.updateInput(!0))
              : this.fetchInputs(),
            this.config.autoCloseOnSelect && !1 === this.config.inline
              ? this.hideDropdown(a)
              : void 0 !== this.footer &&
                null != this.config.endDate &&
                this.footer.find(".caleran-apply").removeAttr("disabled");
        }
      else
        (this.config.startDate = n),
          (this.config.endDate = n),
          (this.globals.endSelected = !0),
          (this.globals.startSelected = !1),
          (this.globals.hoverDate = null),
          !0 ===
          this.config.onbeforeselect(
            this,
            this.config.startDate.clone(),
            this.config.endDate.clone()
          )
            ? ((this.globals.firstValueSelected = !0),
              this.clearRangeSelection(),
              this.updateInput(!0))
            : this.fetchInputs(),
          this.config.autoCloseOnSelect && !1 === this.config.inline
            ? this.hideDropdown(a)
            : void 0 !== this.footer &&
              null != this.config.endDate &&
              this.footer.find(".caleran-apply").removeAttr("disabled");
      return this.reDrawCells(), this.updateHeader(), this.stopBubbling(a), !1;
    },
    checkRangeContinuity: function () {
      var e = this;
      if (!1 === this.config.continuous) return !0;
      for (
        var a = this.config.endDate.diff(this.config.startDate, "days"),
          i = moment(this.config.startDate),
          n = function (a) {
            return t.grep(e.config.disabledRanges, function (t) {
              return a.isBetween(t.start, t.end, "day", "[]");
            });
          },
          s = 0;
        s <= a;
        s++
      ) {
        if (n(i).length > 0 || !0 === this.config.disableDays(i.clone()))
          return !1;
        i.middleOfDay().add(1, "days");
      }
      return !0;
    },
    isDisabled: function (t) {
      if (!0 === this.config.disableDays(moment(t).middleOfDay().clone()))
        return !0;
      for (var e = 0; e < this.config.disabledRanges.length; e++) {
        var a = this.config.disabledRanges[e];
        if (moment(t).isBetween(a.start, a.end, "day", "[]")) return !0;
      }
      return !1;
    },
    cellHovered: function (a) {
      ((a = a || e.event).target = a.target || a.srcElement),
        !1 === t(a.target).hasClass("caleran-day") &&
          (a.target = t(a.target).closest(".caleran-day").get(0));
      var i = t(a.target).data("value");
      (this.globals.hoverDate = moment.unix(i).middleOfDay()),
        (this.globals.keyboardHoverDate = null),
        !0 === this.globals.startSelected && this.reDrawCells(),
        this.stopBubbling(a);
    },
    reDrawCalendars: function () {
      this.input.empty(),
        this.drawUserInterface(),
        this.container.focus(),
        0 !== this.globals.lastScrollY &&
          e.scrollTo(this.globals.lastScrollX, this.globals.lastScrollY);
    },
    monthSwitchClicked: function () {
      if (!(this.calendars.find(".caleran-month-selector").length > 0)) {
        var e = this;
        this.calendars.get(0).scrollTop = 0;
        for (
          var a = t("<div class='caleran-month-selector'></div>").appendTo(
              this.calendars
            ),
            i = this.globals.currentDate.get("month"),
            n = 0;
          n < 12;
          n++
        )
          a.append(
            "<div class='caleran-ms-month" +
              (i == n ? " current" : "") +
              "' data-month='" +
              n +
              "'>" +
              (this.config.numericMonthSelector
                ? n + 1
                : moment({ day: 15, hour: 12, month: n })
                    .locale(this.config.locale)
                    .format(this.config.monthSwitcherFormat)) +
              "</div>"
          );
        a.css("display", "block"),
          this.optimizeFontSize(a.find(".caleran-ms-month")),
          a
            .find(".caleran-ms-month")
            .off("click")
            .on("click", function (a) {
              e.globals.currentDate.month(t(this).data("month")),
                e.config.onaftermonthchange(
                  e,
                  e.globals.currentDate.clone().startOfMonth()
                ),
                e.reDrawCalendars(),
                e.calendars.find(".caleran-month-selector").remove(),
                e.stopBubbling(a);
            });
      }
    },
    yearSwitchClicked: function () {
      if (!(this.calendars.find(".caleran-year-selector").length > 0)) {
        var e = this;
        this.calendars.get(0).scrollTop = 0;
        var i = t("<div class='caleran-year-selector'></div>").appendTo(
            this.calendars
          ),
          n = this.globals.currentDate.get("year");
        i.append(
          '<div class="caleran-ys-year-prev"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"></path></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
        ),
          i.data("year", n);
        for (var s = n - 6; s < n + 7; s++)
          i.append(
            "<div class='caleran-ys-year" +
              (n == s ? " current" : "") +
              "' data-year='" +
              s +
              "'>" +
              s +
              "</div>"
          );
        i.append(
          '<div class="caleran-ys-year-next"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M360.731,229.075l-225.1-225.1c-5.3-5.3-13.8-5.3-19.1,0s-5.3,13.8,0,19.1l215.5,215.5l-215.5,215.5c-5.3,5.3-5.3,13.8,0,19.1c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-4l225.1-225.1C365.931,242.875,365.931,234.275,360.731,229.075z"/></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
        ),
          i.css("display", "block"),
          this.optimizeFontSize(i.find(".caleran-ys-year")),
          t(a)
            .off("click.caleranys")
            .on("click.caleranys", ".caleran-ys-year", function (a) {
              e.globals.currentDate.year(t(this).data("year")),
                e.config.onafteryearchange(
                  e,
                  e.globals.currentDate.clone().startOf("year")
                ),
                e.reDrawCalendars(),
                e.calendars.find(".caleran-year-selector").remove(),
                e.stopBubbling(a);
            }),
          t(a)
            .off("click.caleranysprev")
            .on("click.caleranysprev", ".caleran-ys-year-prev", function (t) {
              var a = i.data("year") - 13,
                n = e.globals.currentDate.get("year");
              i.data("year", a),
                i.empty(),
                i.append(
                  '<div class="caleran-ys-year-prev"><svg class="caleran-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"></path></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
                );
              for (var s = a - 6; s < a + 7; s++)
                i.append(
                  "<div class='caleran-ys-year" +
                    (n == s ? " current" : "") +
                    "' data-year='" +
                    s +
                    "'>" +
                    s +
                    "</div>"
                );
              i.append(
                '<div class="caleran-ys-year-next"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M360.731,229.075l-225.1-225.1c-5.3-5.3-13.8-5.3-19.1,0s-5.3,13.8,0,19.1l215.5,215.5l-215.5,215.5c-5.3,5.3-5.3,13.8,0,19.1c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-4l225.1-225.1C365.931,242.875,365.931,234.275,360.731,229.075z"/></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
              ),
                e.stopBubbling(t);
            }),
          t(a)
            .off("click.caleranysnext")
            .on("click.caleranysnext", ".caleran-ys-year-next", function (t) {
              var a = i.data("year") + 13,
                n = e.globals.currentDate.get("year");
              i.data("year", a),
                i.empty(),
                i.append(
                  '<div class="caleran-ys-year-prev"><svg class="caleran-svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M145.188,238.575l215.5-215.5c5.3-5.3,5.3-13.8,0-19.1s-13.8-5.3-19.1,0l-225.1,225.1c-5.3,5.3-5.3,13.8,0,19.1l225.1,225c2.6,2.6,6.1,4,9.5,4s6.9-1.3,9.5-4c5.3-5.3,5.3-13.8,0-19.1L145.188,238.575z"></path></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
                );
              for (var s = a - 6; s < a + 7; s++)
                i.append(
                  "<div class='caleran-ys-year" +
                    (n == s ? " current" : "") +
                    "' data-year='" +
                    s +
                    "'>" +
                    s +
                    "</div>"
                );
              i.append(
                '<div class="caleran-ys-year-next"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 477.175 477.175" xml:space="preserve"><g><path d="M360.731,229.075l-225.1-225.1c-5.3-5.3-13.8-5.3-19.1,0s-5.3,13.8,0,19.1l215.5,215.5l-215.5,215.5c-5.3,5.3-5.3,13.8,0,19.1c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-4l225.1-225.1C365.931,242.875,365.931,234.275,360.731,229.075z"/></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g><g></g></svg></div>'
              ),
                e.stopBubbling(t);
            });
      }
    },
    optimizeFontSize: function (a) {
      a.each(function (a, i) {
        (i = t(i))
          .wrapInner("<span class='adjust-subject'></span>")
          .prepend("<span class='font-adjuster'>i</span>");
        var n = i.find(".adjust-subject"),
          s = i.find(".font-adjuster");
        if (n.innerHeight() === s.innerHeight())
          s.remove(), n.contents().unwrap();
        else {
          for (var o = 0; n.innerHeight() !== s.innerHeight() && o < 16; ) {
            var l = 0;
            if (
              ((l =
                void 0 !== e.getComputedStyle
                  ? parseFloat(
                      e
                        .getComputedStyle(s.get(0), null)
                        .getPropertyValue("font-size")
                    )
                  : parseFloat(s.css("font-size"))),
              n.parent().css("font-size", l - 1 + "px"),
              s.css("font-size", l - 1 + "px"),
              l < 2)
            )
              break;
            o++;
          }
          s.remove(), n.contents().unwrap();
        }
      });
    },
    showDropdown: function (a) {
      var i = a || e.event || jQuery.Event("click", { target: this.elem });
      (i.target = i.target || i.srcElement),
        ((!this.globals.isMobile && "none" == this.container.css("display")) ||
          (this.globals.isMobile && "none" == this.input.css("display"))) &&
          (i.target !== this.elem &&
            ((this.globals.dontHideOnce = !0),
            (this.globals.initiator = i.target)),
          this.fetchInputs(),
          this.reDrawCalendars(),
          (this.globals.startDateInitial = this.config.startDate),
          (this.globals.endDateInitial = this.config.endDate),
          this.config.onbeforeshow(this),
          this.globals.isMobile
            ? (this.input.css({ display: "flex" }),
              t("body").addClass("caleran-open"))
            : this.container.css({ display: "block" }),
          this.setViewport(),
          this.config.onaftershow(this));
    },
    hideDropdown: function (a) {
      var i = a || e.event || jQuery.Event("click", { target: "body" });
      (i.target = i.target || i.srcElement),
        this.globals.initiator !== i.target &&
          !1 === this.config.inline &&
          ((!this.globals.isMobile &&
            "none" !== this.container.css("display")) ||
            (this.globals.isMobile && "none" !== this.input.css("display"))) &&
          (this.config.onbeforehide(this),
          this.globals.isMobile
            ? (this.input.css({ display: "none" }),
              t("body").removeClass("caleran-open"))
            : this.container.css({ display: "none" }),
          (this.globals.hoverDate = null),
          null !== this.globals.startDateBackup &&
            ((this.config.startDate = this.globals.startDateBackup),
            (this.globals.startSelected = !1)),
          this.config.onafterhide(this));
    },
    reDrawCells: function () {
      var e = this.container.find(".caleran-day, .caleran-disabled"),
        a =
          null != this.config.startDate
            ? this.config.startDate.middleOfDay().unix()
            : null,
        i =
          null != this.config.endDate
            ? this.config.endDate.middleOfDay().unix()
            : null,
        n =
          null != this.config.minDate
            ? this.config.minDate.middleOfDay().unix()
            : null,
        s =
          null != this.config.maxDate
            ? this.config.maxDate.middleOfDay().unix()
            : null,
        o =
          null != this.globals.hoverDate
            ? this.globals.hoverDate.middleOfDay().unix()
            : null,
        l =
          null != this.globals.keyboardHoverDate
            ? this.globals.keyboardHoverDate.middleOfDay().unix()
            : null,
        r = moment().middleOfDay().unix();
      this.lastHoverStatus = !1;
      for (var c = 0; c < e.length; c++) {
        var h = t(e[c]),
          g = parseInt(h.attr("data-value")),
          d = moment.unix(g).middleOfDay().locale(this.config.locale),
          f = "caleran-day",
          p = d.day();
        (6 != p && 0 !== p) || (f += " caleran-weekend"),
          g === r && (f += " caleran-today"),
          (f = this.addSelectedStyles(g, f, a, i, n, s)),
          (f = this.addHoverStyles(h, g, f, this, a, o, l)),
          (f = this.addDisabledStyles(h, d, g, f, n, s)),
          h.attr("class", f);
      }
      this.config.ondraw(this), this.attachEvents();
    },
    addSelectedStyles: function (t, e, a, i, n, s) {
      var o = this;
      return (
        (!1 === o.config.startEmpty || o.globals.firstValueSelected) &&
          (!1 === o.config.singleDate &&
            null !== a &&
            a === t &&
            (e += " caleran-start"),
          !1 === o.config.singleDate &&
            null !== i &&
            i === t &&
            (e += " caleran-end"),
          !1 === o.config.singleDate &&
            null !== a &&
            null !== i &&
            t <= i &&
            t >= a &&
            (e += " caleran-selected"),
          !0 === o.config.singleDate &&
            null !== a &&
            a === t &&
            (e += " caleran-selected caleran-start caleran-end")),
        e
      );
    },
    addHoverStyles: function (t, e, a, i, n, s, o) {
      return (
        a
          .replace("caleran-hovered", "")
          .replace("caleran-hovered-last", "")
          .replace("caleran-hovered-first", ""),
        !0 === this.globals.startSelected &&
          !1 === this.globals.endSelected &&
          null !== s &&
          ((e >= s && e <= n) || (e <= s && e >= n)) &&
          (a += " caleran-hovered"),
        1 == this.config.enableKeyboard &&
          null !== o &&
          (!1 === this.globals.startSelected
            ? o == e && (a += " caleran-hovered")
            : ((e <= n && e >= o) || (e >= n && e <= o)) &&
              (a += " caleran-hovered")),
        !1 === this.lastHoverStatus &&
          a.indexOf("caleran-hovered") > 0 &&
          ((this.lastHoverStatus = !0), (a += " caleran-hovered-first")),
        !0 === this.lastHoverStatus &&
          a.indexOf("caleran-hovered") < 0 &&
          (t.prev(".caleran-day").addClass("caleran-hovered-last"),
          (this.lastHoverStatus = !1)),
        a
      );
    },
    addDisabledStyles: function (e, a, i, n, s, o) {
      var l,
        r = this;
      return (
        ((r.config.disabledRanges.length > 0 &&
          ((l = a),
          t.grep(r.config.disabledRanges, function (t) {
            return l.isBetween(t.start, t.end, "day", "[]");
          })).length > 0) ||
          !0 === r.config.disableDays(a) ||
          (null !== o && i > o) ||
          (null !== s && i < s)) &&
          (n = "caleran-disabled caleran-disabled-range"),
        a.month() != e.closest(".caleran-calendar").data("month") &&
          ((n = n.replace("caleran-disabled", "").replace(/  /g, " ")),
          (n = (n += " caleran-disabled caleran-not-in-month")
            .replace("caleran-weekend", "")
            .replace(/  /g, " "))),
        n
      );
    },
    rangeClicked: function (a) {
      if (
        (((a = a || e.event).target = a.target || a.srcElement),
        a.target.hasAttribute("data-id"))
      ) {
        var i = t(a.target).attr("data-id");
        return (
          (this.globals.currentDate = this.config.ranges[i].startDate
            .startOf("day")
            .clone()
            .middleOfDay()),
          (this.config.startDate = this.config.ranges[i].startDate
            .startOf("day")
            .clone()
            .middleOfDay()),
          (this.config.endDate = this.config.ranges[i].endDate
            .startOf("day")
            .clone()
            .middleOfDay()),
          (this.globals.firstValueSelected = !0),
          !1 === this.checkRangeContinuity()
            ? this.fetchInputs()
            : (this.clearRangeSelection(),
              (this.config.ranges[i].selected = !0),
              this.config.onrangeselect(this, this.config.ranges[i]),
              this.reDrawCalendars(),
              this.setViewport()),
          this.stopBubbling(a),
          !1
        );
      }
    },
    setViewport: function () {
      if (!0 === this.globals.isMobile)
        "none" !== this.input.css("display") &&
          this.container.trigger("caleran:resize");
      else if (
        "none" !== this.container.css("display") &&
        this.globals.initComplete &&
        !1 === this.globals.isMobile &&
        !1 === this.config.inline
      ) {
        var t = this.getViewport();
        switch (this.config.showOn) {
          case "top":
            this.config.autoAlign
              ? this.positionOnTopAlign(t)
              : this.positionOnTop(!1, t);
            break;
          case "left":
            this.config.autoAlign
              ? this.positionOnLeftAlign(t)
              : this.positionOnLeft(!1, t);
            break;
          case "right":
            this.config.autoAlign
              ? this.positionOnRightAlign(t)
              : this.positionOnRight(!1, t);
            break;
          case "bottom":
            this.config.autoAlign
              ? this.positionOnBottomAlign(t)
              : this.positionOnBottom(!1, t);
            break;
          case "center":
            this.positionOnCenter(t);
            break;
          default:
            this.config.autoAlign
              ? this.positionOnBottomAlign(t)
              : this.positionOnBottom(!1, t);
        }
        if ("horizontal" !== this.config.rangeOrientation) {
          var e =
            this.input.find(".caleran-header").outerHeight() +
            this.input.find(".caleran-calendars").outerHeight() +
            (this.input.find(".caleran-footer").length > 0
              ? this.input.find(".caleran-footer").outerHeight()
              : 0);
          this.input.find(".caleran-right").css("max-height", e);
        }
      }
    },
    getDropdownPos: function (t) {
      var e = this.getDimensions(this.$elem, !0),
        a = this.getDimensions(this.container, !0),
        i = parseInt(this.input.css("margin-left"), 10),
        n = parseFloat(
          this.container
            .find("div[class*='caleran-box-arrow']")
            .first()
            .outerHeight() / 2
        );
      switch (t) {
        case "left":
          switch (this.config.arrowOn) {
            case "top":
              return {
                top: e.offsetTop - i - n - e.height / 2,
                left: e.offsetLeft - a.width - i,
                arrow: 0,
              };
            case "center":
              return {
                top: e.offsetTop - i - a.height / 2,
                left: e.offsetLeft - a.width - i,
                arrow: (a.height - 2 * n) / 2 - e.height / 2,
              };
            case "bottom":
              return {
                top: e.offsetTop - a.height + e.height + 2 * i + n,
                left: e.offsetLeft - a.width - i,
                arrow: a.height - 4 * n - 3 * i - e.height / 2,
              };
            default:
              return {
                top: e.offsetTop - i - n - e.height / 2,
                left: e.offsetLeft - a.width - i,
                arrow: 0,
              };
          }
          break;
        case "right":
          switch (this.config.arrowOn) {
            case "top":
              return {
                top: e.offsetTop - i - n - e.height / 2,
                left: e.offsetLeft + e.width + i,
                arrow: 0,
              };
            case "center":
              return {
                top: e.offsetTop - i - a.height / 2,
                left: e.offsetLeft + e.width + i,
                arrow: (a.height - 2 * n) / 2 - e.height / 2,
              };
            case "bottom":
              return {
                top: e.offsetTop - a.height + e.height + 2 * i + n,
                left: e.offsetLeft + e.width + i,
                arrow: a.height - 4 * n - 3 * i - e.height / 2,
              };
            default:
              return {
                top: e.offsetTop - i - n - e.height / 2,
                left: e.offsetLeft + e.width + i,
                arrow: 0,
              };
          }
          break;
        case "top":
          switch (this.config.arrowOn) {
            case "left":
              return {
                top: e.offsetTop - a.height - i,
                left: e.offsetLeft - i,
                arrow: 0,
              };
            case "center":
              return {
                top: e.offsetTop - a.height - i,
                left: e.offsetLeft - (a.width - 2 * i - e.width) / 2,
                arrow: (a.width - 5 * n) / 2,
              };
            case "right":
              return {
                top: e.offsetTop - a.height - i,
                left: e.offsetLeft - (a.width - e.width) + i,
                arrow: a.width - 5 * n + i,
              };
            default:
              return {
                top: e.offsetTop - a.height - i,
                left: e.offsetLeft - i,
                arrow: 0,
              };
          }
          break;
        case "bottom":
          switch (this.config.arrowOn) {
            case "left":
              return {
                top: e.offsetTop + e.height - i + n,
                left: e.offsetLeft - i,
                arrow: 0,
              };
            case "center":
              return {
                top: e.offsetTop + e.height - i + n,
                left: e.offsetLeft - (a.width - 2 * i - e.width) / 2,
                arrow: (a.width - 5 * n) / 2,
              };
            case "right":
              return {
                top: e.offsetTop + e.height - i + n,
                left: e.offsetLeft - (a.width - e.width) + i,
                arrow: a.width - 5 * n + i,
              };
            default:
              return {
                top: e.offsetTop + e.height - i + n,
                left: e.offsetLeft - i,
                arrow: 0,
              };
          }
          break;
        case "center":
          switch (this.config.arrowOn) {
            case "center":
              return {
                top: e.offsetTop - i - a.height / 2,
                left: e.offsetLeft - (a.width - 2 * i - e.width) / 2,
              };
          }
      }
    },
    positionOnTop: function (t, e) {
      var a = this.getDropdownPos("top");
      if (t) return a;
      this.container.css({ left: a.left, top: a.top }),
        this.container
          .find("div[class*='caleran-box-arrow-']")
          .attr("class", "caleran-box-arrow-bottom")
          .css({ marginLeft: a.arrow });
    },
    positionOnBottom: function (t, e) {
      var a = this.getDropdownPos("bottom");
      if (t) return a;
      this.container.css({ left: a.left, top: a.top }),
        this.container
          .find("div[class*='caleran-box-arrow-']")
          .attr("class", "caleran-box-arrow-top")
          .css({ marginLeft: a.arrow });
    },
    positionOnLeft: function (t, e) {
      var a = this.getDropdownPos("left");
      if (t) return a;
      this.container.css({ left: a.left, top: a.top }),
        this.container
          .children("div[class*='caleran-box-arrow-']")
          .attr("class", "caleran-box-arrow-right")
          .css({ marginTop: a.arrow });
    },
    positionOnRight: function (t, e) {
      var a = this.getDropdownPos("right");
      if (t) return a;
      this.container.css({ left: a.left, top: a.top }),
        this.container
          .children("div[class*='caleran-box-arrow-']")
          .attr("class", "caleran-box-arrow-left")
          .css({ marginTop: a.arrow });
    },
    positionOnCenter: function (t) {
      var e = this.getDropdownPos("center"),
        a = Math.max(
          e.left + this.container[0].clientWidth - (t.right - 30),
          0
        ),
        i = Math.max(
          e.top + this.container[0].clientHeight - (t.bottom - 30),
          0
        );
      this.config.autoAlign || ((a = 0), (i = 0)),
        (e.left -= a),
        (e.top -= i),
        this.container.css({ left: e.left, top: e.top }),
        this.container.find("div[class*='caleran-box-arrow-']").remove();
    },
    positionOnBottomAlign: function (t) {
      var e = this.positionOnBottom(!0, t),
        a = this.getDimensions(this.container);
      e.top + a.height < t.bottom
        ? this.positionOnBottom(!1, t)
        : this.positionOnTop(!1, t);
    },
    positionOnLeftAlign: function (t) {
      this.positionOnLeft(!0, t).left > t.left - 50
        ? this.positionOnLeft(!1, t)
        : this.positionOnRight(!1, t);
    },
    positionOnRightAlign: function (t) {
      var e = this.positionOnRight(!0, t),
        a = this.getDimensions(this.container);
      e.left + a.width < t.right + 50
        ? this.positionOnRight(!1, t)
        : this.positionOnLeft(!1, t);
    },
    positionOnTopAlign: function (t) {
      this.positionOnTop(!0, t).top > t.top
        ? this.positionOnTop(!1, t)
        : this.positionOnBottom(!1, t);
    },
    getDimensions: function (e, i) {
      var n = a.body,
        s = e[0],
        o = e.offset();
      if (e === this.$elem && 0 == this.globals.parentScrollEventsAttached) {
        var l = t.proxy(function () {
          this.globals.isTicking ||
            ((this.globals.isTicking = !0),
            (this.globals.rafID = this.requestAnimFrame(
              t.proxy(function () {
                this.setViewport(),
                  this.cancelAnimFrame(this.globals.rafID),
                  (this.globals.isTicking = !1);
              }, this)
            )));
        }, this);
        if (s !== n)
          for (var r = s.parentNode; r !== n && null !== r; )
            r.scrollHeight > r.offsetHeight &&
              t(r).off("scroll.caleran").on("scroll.caleran", l),
              (r = r.parentNode);
        this.globals.parentScrollEventsAttached = !0;
      }
      return {
        width: s.offsetWidth,
        height: s.offsetHeight,
        offsetLeft: o.left,
        offsetTop: o.top,
      };
    },
    getViewport: function () {
      var t = this.globals.lastScrollY,
        a = this.globals.lastScrollX,
        i = t + e.innerHeight;
      return { top: t, left: a, right: a + e.innerWidth, bottom: i };
    },
    attachEvents: function () {
      var e = t.proxy(this.drawNextMonth, this),
        a = t.proxy(this.drawPrevMonth, this),
        i = t.proxy(this.cellClicked, this),
        n = t.proxy(this.cellHovered, this),
        s = t.proxy(this.rangeClicked, this),
        o = t.proxy(this.monthSwitchClicked, this),
        l = t.proxy(this.yearSwitchClicked, this),
        r = "click.caleran";
      if (
        (this.container.find(".caleran-next").off(r).one(r, e),
        this.container.find(".caleran-prev").off(r).one(r, a),
        this.container.find(".caleran-day").off(r).on(r, i),
        this.container
          .find(".caleran-day")
          .off("mouseover.caleran")
          .on("mouseover.caleran", n),
        this.container.find(".caleran-disabled").not(".caleran-day").off(r),
        this.container.find(".caleran-range").off(r).on(r, s),
        this.container.find(".caleran-month-switch ").off(r).on(r, o),
        this.container.find(".caleran-year-switch ").off(r).on(r, l),
        !0 === this.globals.isMobile)
      )
        if ("function" == typeof t.fn.swiperight)
          this.input.find(".caleran-calendars").css("touch-action", "none"),
            this.input.find(".caleran-calendars").on("swipeleft", e),
            this.input.find(".caleran-calendars").on("swiperight", a);
        else {
          var c = new Hammer(this.input.find(".caleran-calendars").get(0));
          c.off("swipeleft").on("swipeleft", e),
            c.off("swiperight").on("swiperight", a);
        }
      (!this.globals.isMobile && !this.config.showButtons) ||
        this.config.inline ||
        (this.input
          .find(".caleran-cancel")
          .off("click.caleran")
          .on(
            "click.caleran",
            t.proxy(function (t) {
              this.globals.startDateInitial &&
                (this.config.startDate = this.globals.startDateInitial.clone()),
                this.globals.endDateInitial &&
                  (this.config.endDate = this.globals.endDateInitial.clone()),
                this.hideDropdown(t);
            }, this)
          ),
        this.input
          .find(".caleran-apply")
          .off("click.caleran")
          .on(
            "click.caleran",
            t.proxy(function (t) {
              !0 ===
                this.config.onbeforeselect(
                  this,
                  this.config.startDate.clone(),
                  this.config.endDate.clone()
                ) && !0 === this.checkRangeContinuity()
                ? ((this.globals.firstValueSelected = !0),
                  this.globals.delayInputUpdate
                    ? ((this.globals.delayInputUpdate = !1),
                      this.updateInput(!0),
                      (this.globals.delayInputUpdate = !0))
                    : this.updateInput(!0))
                : this.fetchInputs(),
                this.hideDropdown(t);
            }, this)
          ));
    },
    addInitialEvents: function () {
      var i = this,
        n = "click.caleran";
      (this.globals.documentEvent =
        n + "_" + Math.round(new Date().getTime() + 100 * Math.random())),
        t(a).on(
          this.globals.documentEvent,
          t.proxy(function (a) {
            if (!1 === this.globals.isMobile && !1 === this.config.inline) {
              var i = a || e.event || jQuery.Event("click", { target: "body" });
              (i.target = i.target || i.srcElement),
                0 === t(this.container).find(t(i.target)).length &&
                  this.elem !== i.target &&
                  this.container.is(":visible") > 0 &&
                  this.hideDropdown(i);
            }
          }, this)
        ),
        this.config.enableKeyboard && (n = "click.caleran focus.caleran"),
        this.$elem.off(n).on(
          n,
          t.proxy(
            this.debounce(
              function (i) {
                var n =
                  i || e.event || jQuery.Event("click", { target: "body" });
                (n.target = n.target || n.srcElement),
                  this.input.get(0).clientHeight > 0 &&
                  this.config.target.get(0) !== n.target
                    ? this.hideDropdown(n)
                    : (t(a).trigger("click"), this.showDropdown(n));
              },
              200,
              !0
            ),
            this
          )
        ),
        this.globals.isMobile &&
          t(e).on(
            "resize.caleran",
            t.proxy(function () {
              this.container.trigger("caleran:resize");
            }, this)
          ),
        this.container.on("caleran:resize", function () {
          i.globals.rafID = i.requestAnimFrame(function () {
            if ("none" !== i.input.css("display")) {
              var t = i.input
                .find(".caleran-calendar:visible:first")
                .innerHeight();
              i.input.find(".caleran-calendars").css("height", t),
                i.input.position().top < 0 &&
                  i.input.addClass("caleran-input-top-reset"),
                e.innerWidth > e.innerHeight
                  ? i.input.css("height", t + "px")
                  : i.input.css("height", "auto"),
                i.cancelAnimFrame(i.globals.rafID);
            }
          });
        }),
        "none" !== this.input.css("display") &&
          this.globals.isMobile &&
          this.container.trigger("caleran:resize"),
        !1 === this.globals.isMobile &&
          t(e).on("resize.caleran scroll.caleran", function () {
            i.globals.isTicking ||
              ((i.globals.isTicking = !0),
              (i.globals.lastScrollX =
                e.scrollX || e.pageXOffset || a.documentElement.scrollLeft),
              (i.globals.lastScrollY =
                e.scrollY || e.pageYOffset || a.documentElement.scrollTop),
              (i.globals.rafID = i.requestAnimFrame(
                t.proxy(function () {
                  this.setViewport(),
                    (this.globals.isTicking = !1),
                    this.cancelAnimFrame(this.globals.rafID);
                }, i)
              )));
          });
    },
    stopBubbling: function (t) {
      void 0 !== t.stopPropagation
        ? t.stopPropagation()
        : void 0 !== t.cancelBubble && (t.cancelBubble = !0),
        void 0 !== t.preventDefault && t.preventDefault(),
        (t.returnValue = !1);
    },
    debounce: function (t, e, a) {
      return function () {
        var i = this,
          n = arguments,
          s = a && !i.globals.throttleTimeout;
        clearTimeout(i.globals.throttleTimeout),
          (i.globals.throttleTimeout = setTimeout(function () {
            (i.globals.throttleTimeout = null), a || t.apply(i, n);
          }, e)),
          s && t.apply(i, n);
      };
    },
    requestAnimFrame: function (t) {
      return "function" == typeof e.requestAnimationFrame
        ? requestAnimationFrame(t)
        : "function" == typeof e.webkitRequestAnimationFrame
        ? webkitRequestAnimationFrame(t)
        : "function" == typeof e.mozRequestAnimationFrame
        ? mozRequestAnimationFrame(t)
        : setTimeout(t, 100 / 6);
    },
    cancelAnimFrame: function (t) {
      return "function" == typeof e.cancelAnimationFrame
        ? cancelAnimationFrame(t)
        : "function" == typeof e.webkitCancelAnimationFrame
        ? webkitCancelAnimationFrame(t)
        : "function" == typeof e.mozCancelAnimationFrame
        ? mozCancelAnimationFrame(t)
        : clearTimeout(t);
    },
    addKeyboardEvents: function () {
      if (this.config.enableKeyboard) {
        var e = t.proxy(function (t) {
          var e = t.which ? t.which : t.keyCode;
          null === this.globals.keyboardHoverDate
            ? null === this.config.startDate
              ? (this.globals.keyboardHoverDate = moment({
                  day: 1,
                  month: this.calendars.first().data("month"),
                }).middleOfDay())
              : (this.globals.keyboardHoverDate = this.config.startDate
                  .clone()
                  .middleOfDay())
            : this.globals.keyboardHoverDate.middleOfDay();
          var a = !1,
            i = !1;
          switch (e) {
            case 37:
              this.globals.keyboardHoverDate.add(-1, "day"), (a = !0), (i = !0);
              break;
            case 38:
              this.globals.keyboardHoverDate.add(-1, "week"),
                (a = !0),
                (i = !0);
              break;
            case 39:
              this.globals.keyboardHoverDate.add(1, "day"), (a = !0), (i = !0);
              break;
            case 40:
              this.globals.keyboardHoverDate.add(1, "week"), (a = !0), (i = !0);
              break;
            case 32:
              this.input
                .find(
                  ".caleran-day[data-value='" +
                    this.globals.keyboardHoverDate.middleOfDay().unix() +
                    "']"
                )
                .first()
                .trigger("click.caleran"),
                (a = !1),
                (i = !0);
              break;
            case 33:
              t.shiftKey
                ? this.globals.keyboardHoverDate.add(-1, "years")
                : this.globals.keyboardHoverDate.add(-1, "months"),
                (a = !0),
                (i = !0);
              break;
            case 34:
              t.shiftKey
                ? this.globals.keyboardHoverDate.add(1, "years")
                : this.globals.keyboardHoverDate.add(1, "months"),
                (a = !0),
                (i = !0);
              break;
            case 27:
            case 9:
              this.hideDropdown(t);
              break;
            case 36:
              t.shiftKey &&
                ((this.globals.keyboardHoverDate = moment().middleOfDay()),
                (a = !0),
                (i = !0));
          }
          if (a || i)
            return (
              (this.globals.keyboardHoverDate =
                this.globals.keyboardHoverDate.middleOfDay()),
              (this.globals.keyboardHoverDate.isBefore(
                moment.unix(
                  this.input.find(".caleran-day:first").attr("data-value")
                ),
                "day"
              ) ||
                this.globals.keyboardHoverDate.isAfter(
                  moment.unix(
                    this.input.find(".caleran-day:last").attr("data-value")
                  ),
                  "day"
                )) &&
                ((this.globals.currentDate = this.globals.keyboardHoverDate
                  .clone()
                  .startOfMonth()),
                this.reDrawCalendars(),
                (a = !1)),
              a && ((this.globals.hoverDate = null), this.reDrawCells()),
              i && this.stopBubbling(t),
              !1
            );
        }, this);
        this.$elem.off("keydown.caleran").on("keydown.caleran", e),
          this.container.off("keydown.caleran").on("keydown.caleran", e);
      }
    },
    destroy: function () {
      this.config.inline
        ? (this.input.remove(),
          this.globals.isMobile
            ? this.$elem.unwrap(".caleran-container-mobile")
            : this.$elem.unwrap(".caleran-container"),
          (this.elem.type = "text"))
        : this.container.remove(),
        t(a).off(this.globals.documentEvent),
        this.$elem.removeData("caleran");
    },
    checkMobile: function () {
      return (
        /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
          navigator.userAgent || navigator.vendor || e.opera
        ) ||
        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
          (navigator.userAgent || navigator.vendor || e.opera).substr(0, 4)
        )
      );
    },
    setStart: function (t) {
      !1 === this.isDisabled(t) &&
        moment(t).isValid() &&
        ((this.config.startDate = moment(t)), this.refreshValues());
    },
    setEnd: function (t) {
      !1 === this.isDisabled(t) &&
        moment(t).isValid() &&
        ((this.config.endDate = moment(t)), this.refreshValues());
    },
    setMinDate: function (t) {
      moment(t).isValid() &&
        ((this.config.minDate = moment(t)), this.refreshValues());
    },
    setMaxDate: function (t) {
      moment(t).isValid() &&
        ((this.config.maxDate = moment(t)), this.refreshValues());
    },
    setDisplayDate: function (t) {
      moment(t).isValid() &&
        ((this.globals.currentDate = moment(t)), this.reDrawCalendars());
    },
    refreshValues: function () {
      var t = this.globals.delayInputUpdate;
      (this.globals.delayInputUpdate = !1),
        this.validateDates(),
        this.updateInput(),
        (this.globals.delayInputUpdate = t),
        this.reDrawCells();
    },
  }).defaults),
    (t.fn.caleran = function (t) {
      return this.each(function () {
        new n(this, t).init();
      });
    }),
    "function" != typeof moment.fn.middleOfDay &&
      ((moment.fn.middleOfDay = function () {
        return this.hours(12).minutes(0).seconds(0), this;
      }),
      (moment.fn.startOfMonth = function () {
        return this.middleOfDay().date(1), this;
      }));
})(jQuery, window, document);
