"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateInjectCode = exports.findAllHtmlInProject = void 0;
const fast_glob_1 = __importDefault(require("fast-glob"));
const types_1 = require("./types");
const DEFAULT_GLOB_PATTERN = [
    '**/*.html',
    '!node_modules/**/*.html',
    '!.**/*.html'
];
/**
 * find all html file in project and return it as Pages
 */
function findAllHtmlInProject(extraGlobPattern = []) {
    const pages = {};
    let realPattern = extraGlobPattern;
    if (extraGlobPattern.length === 0) {
        realPattern = DEFAULT_GLOB_PATTERN;
    }
    const files = fast_glob_1.default.sync(realPattern);
    files.forEach(file => {
        const filePathArr = file.split('/');
        pages[filePathArr[filePathArr.length - 1].replace('.html', '')] = `/${file}`;
    });
    return pages;
}
exports.findAllHtmlInProject = findAllHtmlInProject;
/**
 * directly use find\replacement / replacement\find to replace find
 * @param {pos, find, replacement}
 * @param code
 */
function generateInjectCode({ pos, find, replacement }, code) {
    if (pos === types_1.POS.after) {
        return code.replace(find, `${find}\n${replacement}`);
    }
    if (pos === types_1.POS.before) {
        return code.replace(find, `\n${replacement}\n${find}`);
    }
    return code;
}
exports.generateInjectCode = generateInjectCode;
//# sourceMappingURL=utils.js.map