export declare type PageObject = {
    template: string;
    data?: VirtualHtmlTemplateData;
    render?: VirtualHtmlTemplateRender;
};
/**
 * describe a page
 */
export declare type VirtualHtmlPage = string | PageObject;
/**
 * html template render
 */
export declare type VirtualHtmlTemplateRender = (template: string, data: Record<string, any>) => string;
export declare type VirtualHtmlTemplateData = Record<string, any>;
export declare type Pages = {
    [key: string]: VirtualHtmlPage;
};
/**
 * plugin config options
 */
export declare type PluginOptions = {
    /**
     * config html-entries' path
     * if it is true, plugin will use glob to find all the html page in project to generate a json like {a: /src/a/a.html,}
     */
    pages?: Pages | true;
    /**
     * define the index page,to replace default index.html
     * this page will trigger `transformIndexHtml` hook.
     */
    indexPage?: string;
    /**
     * use for template. as global inject data
     */
    data?: Record<string, unknown>;
    /**
     * function to render template
     */
    render?: VirtualHtmlTemplateRender;
    /**
     * when pages set to true, customize fast-glob's pattern
     * default value is ['**\\*.html', '!node_modules\\**\\*.html', '!.**\\*.html']
     */
    extraGlobPattern?: Array<string>;
    /**
     * inject code to html
     * key: html name, can be *
     */
    injectCode?: Record<string, InjectCode>;
};
/**
 * inject code to tag's before or after
 */
export declare enum POS {
    before = 0,
    after = 1
}
/**
 * inject code config
 */
export declare type InjectCode = {
    pos: POS;
    find: string;
    replacement: string;
};
export declare const DEFAULT_INJECTCODE_ALL = "*";
export declare function defaultRender(template: string, data: Record<string, any>): string;
export declare const cwd: string;
